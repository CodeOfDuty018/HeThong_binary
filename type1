module thu(
    input clk,
    input rst,
    input [7:0] bin_value,  // Giá trị từ module counter (0-99)
    output reg [6:0] seg,   // 7 đoạn (a, b, c, d, e, f, g)
    output reg [1:0] an     // Chọn LED (anode)
);

// Khai báo các biến
reg [3:0] tens;         // Chữ số hàng chục
reg [3:0] units;        // Chữ số hàng đơn vị
reg [19:0] counter;     // Bộ đếm để chia tần số
reg toggle;             // Tín hiệu chuyển đổi LED

// Chuyển giá trị nhị phân (0-99) sang BCD (Binary-Coded Decimal)
always @(*) begin
    tens = bin_value / 10;
    units = bin_value % 10;
end

// Chia tần số để làm mới LED (khoảng 100Hz)
always @(posedge clk or posedge rst) begin
    if (rst) begin
        counter <= 0;
        toggle <= 0;
    end else begin
        counter <= counter + 1;
        if (counter == 20'hFFFFF) begin  // Điều chỉnh giá trị để thay đổi tốc độ
            toggle <= ~toggle;
            counter <= 0;
        end
    end
end

// Giải mã 7 đoạn cho 1 chữ số
function [6:0] seg7_decoder;
    input [3:0] num;
    case (num)
        4'd0: seg7_decoder = 7'b1000000;  // 0 (a, b, c, d, e, f on)
        4'd1: seg7_decoder = 7'b1111001;  // 1 (b, c on)
        4'd2: seg7_decoder = 7'b0100100;  // 2
        4'd3: seg7_decoder = 7'b0110000;  // 3
        4'd4: seg7_decoder = 7'b0011001;  // 4
        4'd5: seg7_decoder = 7'b0010010;  // 5
        4'd6: seg7_decoder = 7'b0000010;  // 6
        4'd7: seg7_decoder = 7'b1111000;  // 7
        4'd8: seg7_decoder = 7'b0000000;  // 8
        4'd9: seg7_decoder = 7'b0010000;  // 9
        default: seg7_decoder = 7'b1111111; // Tắt tất cả
    endcase
endfunction

// Đa hợp hiển thị 2 chữ số
always @(posedge clk) begin
    if (toggle) begin
        seg <= seg7_decoder(tens);  // Hiển thị hàng chục
        an <= 2'b10;               // Bật LED hàng chục
    end else begin
        seg <= seg7_decoder(units); // Hiển thị hàng đơn vị
        an <= 2'b01;               // Bật LED hàng đơn vị
    end
end

endmodule
